# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
defaults: &defaults
  docker:
    - image: circleci/android:api-30-ndk
  working_directory: ~/brd-mobile
  resource_class: medium+

  environment:
    SDK_FILENAME: sdk-tools-linux-4333796.zip
    ANDROID_HOME: /opt/android/sdk

version: 2.1

commands:
  # Default init command
  default-project-setup:
    steps:
      - checkout
      - pull-submodules
      - refresh-gradle

  # Pull submodules command
  pull-submodules:
    steps:
      # Pull submodules
      - run:
          name: Pull submodules
          command: |
            git submodule update --init --recursive

  # Refresh gradle command
  refresh-gradle:
    steps:
      # Restore cache - Gradle
      - restore_cache:
          name: Restoring cache - Gradle
          keys:
            - v1-dependencies-{{ checksum "brd-android/build.gradle.kts" }}-{{ checksum "brd-android/app/build.gradle.kts" }}

      # Refresh gradle
#      - run:
#          name: Refresh gradle
#          command: |
#            ./gradlew  dependencies

      # save cache - Gradle
      - save_cache:
          name: Saving cache - Gradle
          key: v1-dependencies-{{ checksum "brd-android/build.gradle.kts" }}-{{ checksum "brd-android/app/build.gradle.kts" }}
          paths:
            - ~/.gradle

orbs:
  node: circleci/node@5.0.2
jobs:
  # Test job (run tests & generate Jacoco report)
  test:
    <<: *defaults
    steps:
      # Setup project
      - default-project-setup
      # Unit tests
      - run:
          name: Run unit tests
          command: |
            ./gradlew  --console=plain  testDevelopmentTestnetDebugUnitTest

      # Generate Jacoco report
      - run:
          name: Generate Jacoco report
          command: |
            ./gradlew  --console=plain :brd-android:app:jacocoTestReport

  # Release job (build apk and aab)
  release:
    <<: *defaults
    steps:
      # Setup project
      - default-project-setup
      - node/install
      # Prepare keystore
      - run:
          name: Prepare keystore
          command: |
            mkdir /home/circleci/key
            echo $release_keystore > /home/circleci/key/base64
            base64 -d /home/circleci/key/base64 > /home/circleci/key/keystore
            ls -la /home/circleci/key

      # Install fireup
      - run:
          name: Install fireup
          command: |
            npm install --global fireup-cli
            fireup config:set storage.bucket $STORAGE_BUCKET_ID
            echo "$FIREBASE_ADMIN_SERVICE" | base64 --decode > serviceAccount.json
            
      # Build apk
      - run:
          name: Build release apk - ProductionMainnet
          command: |
            ./gradlew --console=plain brd-android:app:assembleProductionMainnetRelease
#      - run:
#          name: Build release apk - DevelopmentMainnet
#          command: |
#            ./gradlew --console=plain brd-android:app:assembleDevelopmentMainnetRelease
#      - run:
#          name: Build release apk - DevelopmentTestnet
#          command: |
#            ./gradlew --console=plain brd-android:app:assembleDevelopmentTestnetRelease
#      - run:
#          name: Build release apk - StagingMainnet
#          command: |
#            ./gradlew --console=plain brd-android:app:assembleStagingMainnetRelease

      # Prepare artifacts
      - run:
          name: Prepare artifacts
          command: |
            mkdir -p ~/artifacts
            cp -r ./brd-android/app/build/outputs/apk/productionMainnet/release ~/artifacts;
#            cp -r ./brd-android/app/build/outputs/apk/developmentMainnet/release ~/artifacts;
#            cp -r ./brd-android/app/build/outputs/apk/developmentTestnet/release ~/artifacts;
#            cp -r ./brd-android/app/build/outputs/apk/stagingMainnet/release ~/artifacts;
          when: always

      - run:
          name: Upload Artifacts
          command: |
            for file in ~/artifacts/*.apk; do echo $(pwd)/$file; done
            fireup up ~/artifacts/developmentMainnet-release-4.11.1.32.apk -pc > release.txt
            cp -r release.txt ~/artifacts;
          when: always
      # Upload artifacts
      - store_artifacts:
          path: ~/artifacts
workflows:
  test_and_build:
    jobs:
      - test
      - release:
          filters:
            branches:
              only:
                - /release\/.*/
          requires:
            - test
